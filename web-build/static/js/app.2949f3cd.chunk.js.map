{"version":3,"sources":["App.js","index.js"],"names":["choice","choices","Math","floor","random","length","randomInt","x","y","Question","props","changeGuess","guess","NaN","parseFloat","setState","submitGuess","state","newStreak","streak","answer","toString","generate","level","options","type","question","max","min","abs","place","negPlaceNames","posPlaceNames","placeName","digits","decimalIndex","decimalString","digit","slice","round","View","Text","style","styles","bigCenter","this","TextInput","onChangeText","value","placeholder","keyboardType","Button","onPress","title","color","Component","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","padding","textAlign","registerRootComponent","StatusBar"],"mappings":"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","file":"static/js/app.2949f3cd.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Button,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  Text,\r\n  TextInput,\r\n  View,\r\n} from 'react-native'\r\n\r\nfunction choice(choices) {\r\n  var index = Math.floor(Math.random() * choices.length);\r\n  return choices[index];\r\n}\r\n\r\nconst randomInt = (x, y) => {\r\n  return x + Math.floor((y-x+1)*Math.random());\r\n}\r\n\r\nclass Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.generate();\r\n    this.state = {...this.state, 'guess':'', 'streak':0};\r\n  }\r\n\r\n  changeGuess = (guess) => {\r\n    if (parseFloat(guess)!= NaN) {\r\n      this.setState({'guess': guess});\r\n    }\r\n  }\r\n\r\n  submitGuess = () => {\r\n    if (this.state.guess != '') // Prevent blank guesses\r\n    {\r\n      let newStreak = this.state.streak;\r\n      if (this.state.guess == this.state.answer.toString()) {\r\n        newStreak++;\r\n      } else {\r\n        newStreak = 0;\r\n      }\r\n      this.setState({...this.generate(newStreak+1), 'guess':'', 'streak': newStreak});\r\n    }\r\n  }\r\n\r\n  generate(level=1, options=['addition', 'subtraction', 'multiplication', 'division', 'rounding']) {\r\n    const type = choice(options);\r\n    let question = '0+0';\r\n    let answer = 0;\r\n    if (type == 'addition') {\r\n      const x = randomInt(level, 5*level);\r\n      const y = randomInt(level, 5*level);\r\n      question = x.toString() + '+' + y.toString();\r\n      answer = x + y\r\n    } else if (type == 'subtraction') {\r\n      const x = randomInt(level, 5*level);\r\n      const y = randomInt(level, 5*level);\r\n      question = Math.max(x, y).toString() + '-' + Math.min(x, y).toString();\r\n      answer = Math.abs(x - y);\r\n    } else if (type == 'multiplication') {\r\n      const x = randomInt(2, 2+2*level);\r\n      const y = randomInt(2, 2+2*level);\r\n      question = x.toString() + '*' + y.toString();\r\n      answer = x * y;\r\n    } else if (type == 'division') {\r\n      const x = randomInt(2, 2+2*level);\r\n      answer = randomInt(2, 2+2*level);\r\n      question = (x*answer).toString() + '/' + x.toString();\r\n    } else if (type == 'rounding') {\r\n      const place = randomInt(-3, 3);\r\n      const negPlaceNames = [\"ones\", \"tenths\", \"hundredths\", \"thousandths\"];\r\n      const posPlaceNames = [\"ones\", \"tens\", \"hundreds\", \"thousands\"];\r\n      const placeName = place > 0 ? posPlaceNames[place] : negPlaceNames[-place];\r\n      const digits = (place > 0 ? randomInt(place+1, place+Math.floor(level/10)) : randomInt(2-place, 2-place + Math.floor(level/10)));\r\n      const decimalIndex = place > 0 ? 0 : randomInt(1, digits+place-1);\r\n      let decimalString = randomInt(1,9).toString();\r\n      for (let digit = 1; digit < digits; digit++) {\r\n        if (digit == decimalIndex) {\r\n          decimalString += '.';\r\n        }\r\n        decimalString += randomInt(digit != digits-1 ? 0 : 1, 9).toString();\r\n      }\r\n      if (decimalString.slice(-1) == \"5\") {\r\n        if (place > 0) {\r\n          decimalString += \".\";\r\n        }\r\n        decimalString += randomInt(1,9).toString();\r\n      }\r\n      question = \"Round \" + decimalString + \" to the \" + placeName + \" place\";\r\n      answer = Math.round(parseFloat(decimalString)/10**place)/10**(-place);\r\n      if (place >= 0) {\r\n        answer = Math.round(answer)\r\n      }\r\n    }\r\n    return {'question': question, 'answer': answer}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View>\r\n        <Text style={styles.bigCenter}>\r\n          {this.state.question}\r\n        </Text>\r\n        <TextInput\r\n          style={styles.bigCenter}\r\n          onChangeText={this.changeGuess}\r\n          value={this.state.guess}\r\n          placeholder=\"Answer\"\r\n          keyboardType=\"numeric\"\r\n        />\r\n        <Button\r\n          onPress={this.submitGuess}\r\n          title=\"Submit\"\r\n          color=\"#841584\"\r\n        />\r\n        <Text style={styles.bigCenter}>\r\n          Streak: {this.state.streak}\r\n        </Text>\r\n      </View>\r\n    )\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Question/>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  bigCenter: {\r\n    fontSize: '4vw',\r\n    fontWeight: 'bold',\r\n    padding: '2vw',\r\n    textAlign: 'center',\r\n  }\r\n});\r\n","import { registerRootComponent } from 'expo';\r\n\r\nimport App from './App';\r\n\r\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\r\n// It also ensures that whether you load the app in Expo Go or in a native build,\r\n// the environment is set up appropriately\r\nregisterRootComponent(App);\r\n"],"sourceRoot":""}