{"version":3,"sources":["App.js","index.js"],"names":["choice","choices","Math","floor","random","length","randomInt","x","y","greatestFactor","abs","Question","props","changeGuess","guess","isNaN","setState","submitGuess","state","newStreak","streak","answer","toString","generate","getSelectedProblems","keyHandler","e","console","log","nativeEvent","key","slice","includes","checkSubmit","document","addEventListener","this","removeEventListener","problemType","value","updatedProblemTypes","problemTypes","selected","push","level","options","modifiers","type","toLowerCase","question","shift","maxDigits","log10","max","min","place","negPlaceNames","posPlaceNames","placeName","digits","decimalIndex","decimalString","digit","round","parseFloat","baseMultiple","multiples","numMax","nums","maxMultiple","i","join","View","style","flexDirection","flexWrap","Object","keys","map","Pressable","onPress","updateCheckbox","Text","styles","toggleable","color","bigCenter","TextInput","onChangeText","onKeyPress","placeholder","keyboardType","submitContainer","submit","Component","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","padding","textAlign","borderRadius","paddingHorizontal","paddingVertical","registerRootComponent","StatusBar"],"mappings":"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","file":"static/js/app.d32dc574.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, { Component, Fragment } from 'react'\r\nimport {\r\n  Pressable,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  View,\r\n} from 'react-native'\r\n\r\nfunction choice(choices) {\r\n  var index = Math.floor(Math.random() * choices.length);\r\n  return choices[index];\r\n}\r\n\r\nconst randomInt = (x, y) => {\r\n  return x + Math.floor((y-x+1)*Math.random());\r\n}\r\n\r\nconst greatestFactor = (x, y) => {\r\n  if (x*y == 0) {\r\n    return x+y\r\n  }\r\n  return greatestFactor(y, Math.abs(x-y));\r\n}\r\n\r\nclass Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.generate(1, ['GCF']);\r\n    this.state = {...this.state,\r\n      'guess':'',\r\n      'streak':0,\r\n      'problemTypes': {'Addition': false, 'Subtraction': false, 'Multiplication': false, 'Division': false, 'Rounding': false, 'GCF': true},\r\n      };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.keyHandler, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.keyHandler, false);\r\n  }\r\n\r\n  changeGuess = (guess) => {\r\n    if (!isNaN(guess)) {\r\n      this.setState({'guess': guess});\r\n    }\r\n  }\r\n\r\n  submitGuess = () => {\r\n    if (this.state.guess != '') // Prevent blank guesses\r\n    {\r\n      let newStreak = this.state.streak;\r\n      if (this.state.guess == this.state.answer.toString()) {\r\n        newStreak++;\r\n        this.setState({...this.generate(newStreak+1, this.getSelectedProblems()), 'guess':''});\r\n      } else {\r\n        newStreak = 0;\r\n      }\r\n      this.setState({'streak': newStreak});\r\n    }\r\n  }\r\n\r\n  updateCheckbox(problemType, value) {\r\n    var updatedProblemTypes = this.state.problemTypes;\r\n    updatedProblemTypes[problemType] = value;\r\n    this.setState({'problemTypes': updatedProblemTypes});\r\n  }\r\n\r\n  getSelectedProblems() {\r\n    var selected = [];\r\n    for (var problemType in this.state.problemTypes) {\r\n      if (this.state.problemTypes[problemType]) {\r\n        selected.push(problemType);\r\n      }\r\n    }\r\n    return selected;\r\n  }\r\n\r\n  generate(level=1, options=['Addition', 'Subtraction', 'Multiplication', 'Division', 'Rounding', 'GCF'], modifiers=[\"Decimals\"]) {\r\n    const type = choice(options).toLowerCase();\r\n    let question = '0';\r\n    let answer = 0;\r\n    if (type == 'addition') {\r\n      let x = randomInt(level, 5*level);\r\n      let y = randomInt(level, 5*level);\r\n      let shift = 0;\r\n      if (modifiers.includes(\"Decimals\")) {\r\n        const maxDigits = Math.floor(Math.log10(Math.max(x, y)))+1;\r\n        shift = randomInt(0, maxDigits);\r\n      }\r\n      question = (x/10**shift).toString() + '+' + (y/10**shift).toString();\r\n      answer = (x + y)/10**shift;\r\n      console.log(answer);\r\n    } else if (type == 'subtraction') {\r\n      const x = randomInt(level, 5*level);\r\n      const y = randomInt(level, 5*level);\r\n      question = Math.max(x, y).toString() + '-' + Math.min(x, y).toString();\r\n      answer = Math.abs(x - y);\r\n    } else if (type == 'multiplication') {\r\n      const x = randomInt(2, 2+2*level);\r\n      const y = randomInt(2, 2+2*level);\r\n      question = x.toString() + '*' + y.toString();\r\n      answer = x * y;\r\n    } else if (type == 'division') {\r\n      const x = randomInt(2, 2+2*level);\r\n      answer = randomInt(2, 2+2*level);\r\n      question = (x*answer).toString() + '/' + x.toString();\r\n    } else if (type == 'rounding') {\r\n      const place = randomInt(-3, 3);\r\n      const negPlaceNames = [\"ones\", \"tenths\", \"hundredths\", \"thousandths\"];\r\n      const posPlaceNames = [\"ones\", \"tens\", \"hundreds\", \"thousands\"];\r\n      const placeName = place > 0 ? posPlaceNames[place] : negPlaceNames[-place];\r\n      const digits = (place > 0 ? randomInt(place+1, place+Math.floor(level/10)) : randomInt(2-place, 2-place + Math.floor(level/10)));\r\n      const decimalIndex = place > 0 ? 0 : randomInt(1, digits+place-1);\r\n      let decimalString = randomInt(1,9).toString();\r\n      for (let digit = 1; digit < digits; digit++) {\r\n        if (digit == decimalIndex) {\r\n          decimalString += '.';\r\n        }\r\n        decimalString += randomInt(digit != digits-1 ? 0 : 1, 9).toString();\r\n      }\r\n      if (decimalString.slice(-1) == \"5\") {\r\n        if (place > 0) {\r\n          decimalString += \".\";\r\n        }\r\n        decimalString += randomInt(1,9).toString();\r\n      }\r\n      question = \"Round \" + decimalString + \" to the \" + placeName + \" place\";\r\n      answer = Math.round(parseFloat(decimalString)/10**place)/10**(-place);\r\n      if (place >= 0) {\r\n        answer = Math.round(answer)\r\n      }\r\n    } else if (type == 'gcf') {\r\n      let baseMultiple = randomInt(1, level+3);\r\n      let multiples = randomInt(2, level<10 ? 2 : 3);\r\n      let numMax = 5*level;\r\n      let nums = [];\r\n      let maxMultiple = numMax/baseMultiple;\r\n      for (let i=0; i<multiples; i++) {\r\n        nums.push(baseMultiple*randomInt(1, maxMultiple))\r\n      }\r\n      answer = greatestFactor(nums[0], nums[1]);\r\n      question = \"GCF of the terms: \" + nums.join(\", \");\r\n    }\r\n    return {'question': question, 'answer': answer}\r\n  }\r\n\r\n  keyHandler = (e) => {\r\n    console.log(e);\r\n    if (e.nativeEvent.key === 'Enter') {\r\n      this.submitGuess();\r\n    }\r\n    if (e.nativeEvent.key === 'Backspace') {\r\n      this.changeGuess(this.state.guess.slice(0, -1));\r\n    }\r\n    if ('.0123456789'.includes(e.nativeEvent.key)) {\r\n      this.changeGuess(this.state.guess + e.nativeEvent.key);\r\n    }\r\n  };\r\n\r\n  checkSubmit = (e) => {\r\n    console.log(e);\r\n    if (e.nativeEvent.key === 'Enter') {\r\n      this.submitGuess();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <View style = {{flexDirection:\"row\", flexWrap:\"wrap\"}}>\r\n        {\r\n          Object.keys(this.state.problemTypes).map(problemType =>\r\n            <Pressable\r\n                key={problemType}\r\n                onPress={() => this.updateCheckbox(problemType, !this.state.problemTypes[problemType])} \r\n              >\r\n              <Text style={styles.toggleable}>\r\n                <Text style={{color: this.state.problemTypes[problemType] ? 'green':'red'}}>\r\n                  {problemType}\r\n                </Text>\r\n              </Text>\r\n            </Pressable>\r\n          )\r\n        }\r\n        </View>\r\n        <Text style={styles.bigCenter}>\r\n          {this.state.question}\r\n        </Text>\r\n        <TextInput\r\n          style={styles.bigCenter}\r\n          onChangeText={this.changeGuess}\r\n          onKeyPress={this.checkSubmit}\r\n          value={this.state.guess}\r\n          placeholder=\"Answer\"\r\n          keyboardType=\"numeric\"\r\n        />\r\n        <Pressable style={styles.submitContainer} onPress={this.submitGuess}>\r\n          <Text style={styles.submit}>\r\n            Submit\r\n          </Text>\r\n        </Pressable>\r\n        <Text style={styles.bigCenter}>\r\n          Streak: {this.state.streak}\r\n        </Text>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Question/>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  bigCenter: {\r\n    fontSize: '4vw',\r\n    fontWeight: 'bold',\r\n    padding: '2vw',\r\n    textAlign: 'center',\r\n  },\r\n  submit: {\r\n    fontSize: '3vw',\r\n    color: 'white',\r\n  },\r\n  submitContainer: {\r\n    backgroundColor: 'purple',\r\n    borderRadius: '1vw',\r\n    paddingHorizontal: '3vw',\r\n    paddingVertical: '0.5vw'\r\n  },\r\n  toggleable: {\r\n    fontSize: '1.5vw',\r\n    fontWeight: 'bold',\r\n    padding: '.5vw',\r\n    textAlign: 'center',\r\n  }\r\n});\r\n","import { registerRootComponent } from 'expo';\r\n\r\nimport App from './App';\r\n\r\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\r\n// It also ensures that whether you load the app in Expo Go or in a native build,\r\n// the environment is set up appropriately\r\nregisterRootComponent(App);\r\n"],"sourceRoot":""}