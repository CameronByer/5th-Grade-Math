{"version":3,"sources":["App.js","index.js"],"names":["choice","choices","Math","floor","random","length","randomInt","x","y","Question","props","changeGuess","guess","isNaN","setState","submitGuess","state","newStreak","streak","answer","toString","generate","getSelectedProblems","problemType","value","updatedProblemTypes","this","problemTypes","selected","push","level","options","type","question","max","min","abs","place","negPlaceNames","posPlaceNames","placeName","digits","decimalIndex","decimalString","digit","slice","round","parseFloat","View","Object","keys","map","style","flexDirection","flexWrap","CheckBox","onValueChange","updatedValue","updateCheckbox","Text","styles","bigCenter","TextInput","onChangeText","placeholder","keyboardType","Button","onPress","title","color","Component","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","padding","textAlign","registerRootComponent","StatusBar"],"mappings":"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","file":"static/js/app.bc729a7e.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, { Component, Fragment } from 'react'\r\nimport {\r\n  Button,\r\n  CheckBox,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  View,\r\n} from 'react-native'\r\n\r\nfunction choice(choices) {\r\n  var index = Math.floor(Math.random() * choices.length);\r\n  return choices[index];\r\n}\r\n\r\nconst randomInt = (x, y) => {\r\n  return x + Math.floor((y-x+1)*Math.random());\r\n}\r\n\r\nclass Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.generate();\r\n    this.state = {...this.state,\r\n      'guess':'',\r\n      'streak':0,\r\n      'problemTypes': {'addition': true, 'subtraction': true, 'multiplication': true, 'division': true, 'rounding': true},\r\n      };\r\n  }\r\n\r\n  changeGuess = (guess) => {\r\n    if (!isNaN(guess)) {\r\n      this.setState({'guess': guess});\r\n    }\r\n  }\r\n\r\n  submitGuess = () => {\r\n    if (this.state.guess != '') // Prevent blank guesses\r\n    {\r\n      let newStreak = this.state.streak;\r\n      if (this.state.guess == this.state.answer.toString()) {\r\n        newStreak++;\r\n      } else {\r\n        newStreak = 0;\r\n      }\r\n      this.setState({...this.generate(newStreak+1, this.getSelectedProblems()), 'guess':'', 'streak': newStreak});\r\n    }\r\n  }\r\n\r\n  updateCheckbox(problemType, value) {\r\n    var updatedProblemTypes = this.state.problemTypes;\r\n    updatedProblemTypes[problemType] = value;\r\n    this.setState({'problemTypes': updatedProblemTypes});\r\n  }\r\n\r\n  getSelectedProblems() {\r\n    var selected = [];\r\n    for (var problemType in this.state.problemTypes) {\r\n      if (this.state.problemTypes[problemType]) {\r\n        selected.push(problemType);\r\n      }\r\n    }\r\n    return selected;\r\n  }\r\n\r\n  generate(level=1, options=['addition', 'subtraction', 'multiplication', 'division', 'rounding']) {\r\n    const type = choice(options);\r\n    let question = '0';\r\n    let answer = 0;\r\n    if (type == 'addition') {\r\n      const x = randomInt(level, 5*level);\r\n      const y = randomInt(level, 5*level);\r\n      question = x.toString() + '+' + y.toString();\r\n      answer = x + y\r\n    } else if (type == 'subtraction') {\r\n      const x = randomInt(level, 5*level);\r\n      const y = randomInt(level, 5*level);\r\n      question = Math.max(x, y).toString() + '-' + Math.min(x, y).toString();\r\n      answer = Math.abs(x - y);\r\n    } else if (type == 'multiplication') {\r\n      const x = randomInt(2, 2+2*level);\r\n      const y = randomInt(2, 2+2*level);\r\n      question = x.toString() + '*' + y.toString();\r\n      answer = x * y;\r\n    } else if (type == 'division') {\r\n      const x = randomInt(2, 2+2*level);\r\n      answer = randomInt(2, 2+2*level);\r\n      question = (x*answer).toString() + '/' + x.toString();\r\n    } else if (type == 'rounding') {\r\n      const place = randomInt(-3, 3);\r\n      const negPlaceNames = [\"ones\", \"tenths\", \"hundredths\", \"thousandths\"];\r\n      const posPlaceNames = [\"ones\", \"tens\", \"hundreds\", \"thousands\"];\r\n      const placeName = place > 0 ? posPlaceNames[place] : negPlaceNames[-place];\r\n      const digits = (place > 0 ? randomInt(place+1, place+Math.floor(level/10)) : randomInt(2-place, 2-place + Math.floor(level/10)));\r\n      const decimalIndex = place > 0 ? 0 : randomInt(1, digits+place-1);\r\n      let decimalString = randomInt(1,9).toString();\r\n      for (let digit = 1; digit < digits; digit++) {\r\n        if (digit == decimalIndex) {\r\n          decimalString += '.';\r\n        }\r\n        decimalString += randomInt(digit != digits-1 ? 0 : 1, 9).toString();\r\n      }\r\n      if (decimalString.slice(-1) == \"5\") {\r\n        if (place > 0) {\r\n          decimalString += \".\";\r\n        }\r\n        decimalString += randomInt(1,9).toString();\r\n      }\r\n      question = \"Round \" + decimalString + \" to the \" + placeName + \" place\";\r\n      answer = Math.round(parseFloat(decimalString)/10**place)/10**(-place);\r\n      if (place >= 0) {\r\n        answer = Math.round(answer)\r\n      }\r\n    }\r\n    return {'question': question, 'answer': answer}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View>\r\n        {\r\n          Object.keys(this.state.problemTypes).map(problemType =>\r\n          <View style = {{flexDirection:\"row\", flexWrap:\"wrap\"}}>\r\n            <CheckBox\r\n              key = {problemType}\r\n              value={this.state.problemTypes[problemType]}\r\n              onValueChange={(updatedValue) => this.updateCheckbox(problemType, updatedValue)}\r\n            />\r\n            <Text>\r\n              {problemType}\r\n            </Text>\r\n          </View>\r\n          )\r\n        }\r\n        <Text style={styles.bigCenter}>\r\n          {this.state.question}\r\n        </Text>\r\n        <TextInput\r\n          style={styles.bigCenter}\r\n          onChangeText={this.changeGuess}\r\n          value={this.state.guess}\r\n          placeholder=\"Answer\"\r\n          keyboardType=\"numeric\"\r\n        />\r\n        <Button\r\n          onPress={this.submitGuess}\r\n          title=\"Submit\"\r\n          color=\"#841584\"\r\n        />\r\n        <Text style={styles.bigCenter}>\r\n          Streak: {this.state.streak}\r\n        </Text>\r\n      </View>\r\n    )\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Question/>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  bigCenter: {\r\n    fontSize: '4vw',\r\n    fontWeight: 'bold',\r\n    padding: '2vw',\r\n    textAlign: 'center',\r\n  }\r\n});\r\n","import { registerRootComponent } from 'expo';\r\n\r\nimport App from './App';\r\n\r\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\r\n// It also ensures that whether you load the app in Expo Go or in a native build,\r\n// the environment is set up appropriately\r\nregisterRootComponent(App);\r\n"],"sourceRoot":""}